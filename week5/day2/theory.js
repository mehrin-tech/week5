// 1)what is package?
// A package is like a toolbox that contains pre-written code you can use in your own app â€” instead of writing everything from scratch.
// In web development (especially with Node.js), a package is a collection of code, scripts, or modules that are bundled together to perform specific tasks. Itâ€™s usually published and shared through a package manager like npm (Node Package Manager), so developers can reuse and install them easily in their projects.
// What is npm?
// npm stands for Node Package Manager. Itâ€™s the default package manager for Node.js, and it helps you:
// 1.	Install reusable code packages (libraries/tools).
// 2.	Share your own code as packages.
// 3.	Manage dependencies in your project (track versions, updates, etc).

// What is package.json?
// It's a configuration file that stores info about your Node.js project, including:
// Key	What It Does
// "name"	Name of your project
// "version"	Version of your project
// "main"	Entry point file (like index.js)
// "scripts"	Commands you can run (npm start, npm test, etc.)
// "dependencies"	Packages required to run your app
// "devDependencies"	Packages needed only for development (e.g., testing tools)

// What is package-lock.json?
// This file is automatically generated when you install packages using npm.
//  Purpose:
// â€¢	Locks the exact version of each installed package (and their sub-packages).
// â€¢	Ensures that anyone else running your project gets the same versions, avoiding bugs due to version differences.
// â€¢	Itâ€™s like a snapshot of your full dependency tree.



//  Key Difference:
// Feature 	package.json	             package-lock.json
// Created by you	Yes (via npm init)	No (auto-generated when installing packages)
// Editable manually?                   	Yes	Usually not
// Shows version range	Yes (e.g., "^4.18.2")	No â€“ shows exact installed versions
// Required for project	          Yes	Recommended


//  What is Express?
// Express is a fast, minimal, and flexible web framework for Node.js.
// It helps you build web servers and handle HTTP requests and responses easily.

//  Why use Express?
// Without Express, writing a Node.js server is long and manual.
// With Express:
//  You write less code
//  You get powerful features like routing, middleware, and templating
//  Itâ€™s easier to build REST APIs and web apps

//  Real-world Analogy:
// If Node.js is like raw ingredients (rice, spices, veggies),
// then Express is like a cooking assistant â€” it helps you prepare meals faster and cleaner (web servers & APIs).

//  How to Use Express?
//  Step 1: Initialize your project

// npm init -y
//  Step 2: Install Express
// bash

// npm install express
// This adds Express to your project and updates package.json.

//  Step 3: Create a simple Express server
// Create a file index.js:
// const express = require('express');
// const app = express();

// /                /                                               // Define a route
// app.get('/', (req, res) => {
//   res.send('Hello, Mehrin! Welcome to Express ðŸŽ‰');
// });

//                                                               // Start the server
// app.listen(3000, () => {
//   console.log('Server is running on http://localhost:3000');
// });


// //Routing
// is the process of defining how your server responds to different urls requested by the clientInformation.to search top -bottom
// eg:-
// app.get('/',(req,res)=>{
//     res.send("hello")
// })
// app.get('/',(req,res)=>{
//     res.send("everyone")  //in this case ,to take the top 1
// })

// ->if unmatched
// app.get('/',(req,res)=>{
//     res.send('hello')
// })
// app.post('/',(req,res)=>{
//     res.send("eveyroen")
// })

// app.use((req,res)=>{
//     res.status(404).send("invalid route")
// })//status code kodthillel succses aakum.but this is not success.so we can apply status code for handling unmated routes

//Route parameters:-
// In web development, route parameters and query parameters are two common ways to pass data through URLs. They are often used in Express.js (Node.js) or similar backend frameworks. Here's a clear explanation:

//  1. Route Parameter (URL Parameter)
// Used to identify a specific resource

// Part of the URL path

// Defined with a colon : in the route

// Accessed with req.params in Express.js

// eg:-
// // Route definition
// app.get('/users/:id', (req, res) => {
//   const userId = req.params.id;
//   res.send(`User ID is ${userId}`);
// });
// eg:-
// /users/42
// ðŸ’¡ Output:

// User ID is 42

// 2. Query Parameter
// Used to filter or modify a resource

// Added after a ? in the URL

// Key-value pairs joined by &

// Accessed with req.query in Express.js

// eg:-
// // Route definition
// app.get('/search', (req, res) => {
//   const keyword = req.query.q;
//   res.send(`Search result for: ${keyword}`);
// });
//  URL:

// /search?q=javascript
// ðŸ’¡ Output:

// Search result for: javascript
//  Difference Summary:
// Feature	     Route Parameter	                    Query Parameter
// Location	In the URL path	                  After the ? in the URL
// Syntax	     /users/:id	                         /search?q=term
// Use case	Identify a resource	Filter, sort, or modify the result
// Access   in Express.js	req.params	req.query

//  Real-World Example:

// /products/123?color=red&size=M
// Route Param: 123 (product ID)

// Query Params: color=red, size=M



